`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Heyer Industries
// Engineer: Kevin Heyer
// 
// Create Date: 04/29/2020 09:12:09 AM
// Design Name: 
// Module Name: Float_addition_tb
// Project Name: Kalman Filter
// Target Devices: 
// Tool Versions: 
// Description: Testing of Float_addition
// 
// Dependencies: Float.sv and Float_addition.sv
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
// 
// 
//////////////////////////////////////////////////////////////////////////////////

import float:: * ; 
module Float_addition_tb(); 

    logic clk = 0, reset_n = 0, enable = 0,data_ready; 
    float32 idata, odata; 
    Float_addition adder(clk, idata, odata, data_ready, reset_n, enable); 
    int failed = 0;
    logic run_failed=0;

    float32 inputdata [95:0] = {'b11000000000000000000000000000000,'b11000000001000000000000000000000,
'b11000000000000000000000000000000,'b10111111110011001100110011001101,
'b11000000000000000000000000000000,'b10111111001100110011001100110011,
'b11000000000000000000000000000000,'b00111110010011001100110011001101,
'b11000000000000000000000000000000,'b00111111100011001100110011001101,
'b11000000000000000000000000000000,'b01000000000000000000000000000000,
'b10111111110000000000000000000000,'b11000000001000000000000000000000,
'b10111111110000000000000000000000,'b10111111110011001100110011001101,
'b10111111110000000000000000000000,'b10111111001100110011001100110011,
'b10111111110000000000000000000000,'b00111110010011001100110011001101,
'b10111111110000000000000000000000,'b00111111100011001100110011001101,
'b10111111110000000000000000000000,'b01000000000000000000000000000000,
'b10111111100000000000000000000000,'b11000000001000000000000000000000,
'b10111111100000000000000000000000,'b10111111110011001100110011001101,
'b10111111100000000000000000000000,'b10111111001100110011001100110011,
'b10111111100000000000000000000000,'b00111110010011001100110011001101,
'b10111111100000000000000000000000,'b00111111100011001100110011001101,
'b10111111100000000000000000000000,'b01000000000000000000000000000000,
'b10111111000000000000000000000000,'b11000000001000000000000000000000,
'b10111111000000000000000000000000,'b10111111110011001100110011001101,
'b10111111000000000000000000000000,'b10111111001100110011001100110011,
'b10111111000000000000000000000000,'b00111110010011001100110011001101,
'b10111111000000000000000000000000,'b00111111100011001100110011001101,
'b10111111000000000000000000000000,'b01000000000000000000000000000000,
'b00000000000000000000000000000000,'b11000000001000000000000000000000,
'b00000000000000000000000000000000,'b10111111110011001100110011001101,
'b00000000000000000000000000000000,'b10111111001100110011001100110011,
'b00000000000000000000000000000000,'b00111110010011001100110011001101,
'b00000000000000000000000000000000,'b00111111100011001100110011001101,
'b00000000000000000000000000000000,'b01000000000000000000000000000000,
'b00111111000000000000000000000000,'b11000000001000000000000000000000,
'b00111111000000000000000000000000,'b10111111110011001100110011001101,
'b00111111000000000000000000000000,'b10111111001100110011001100110011,
'b00111111000000000000000000000000,'b00111110010011001100110011001101,
'b00111111000000000000000000000000,'b00111111100011001100110011001101,
'b00111111000000000000000000000000,'b01000000000000000000000000000000,
'b00111111100000000000000000000000,'b11000000001000000000000000000000,
'b00111111100000000000000000000000,'b10111111110011001100110011001101,
'b00111111100000000000000000000000,'b10111111001100110011001100110011,
'b00111111100000000000000000000000,'b00111110010011001100110011001101,
'b00111111100000000000000000000000,'b00111111100011001100110011001101,
'b00111111100000000000000000000000,'b01000000000000000000000000000000,
'b00111111110000000000000000000000,'b11000000001000000000000000000000,
'b00111111110000000000000000000000,'b10111111110011001100110011001101,
'b00111111110000000000000000000000,'b10111111001100110011001100110011,
'b00111111110000000000000000000000,'b00111110010011001100110011001101,
'b00111111110000000000000000000000,'b00111111100011001100110011001101,
'b00111111110000000000000000000000,'b01000000000000000000000000000000}; 

    float32 expectedresults[47:0] =  {'b11000000100100000000000000000000,
'b11000000011001100110011001100110,
'b11000000001011001100110011001101,
'b10111111111001100110011001100110,
'b10111111011001100110011001100110,
'b00000000000000000000000000000000,
'b11000000100000000000000000000000,
'b11000000010001100110011001100110,
'b11000000000011001100110011001101,
'b10111111101001100110011001100110,
'b10111110110011001100110011001101,
'b00111111000000000000000000000000,
'b11000000011000000000000000000000,
'b11000000001001100110011001100110,
'b10111111110110011001100110011010,
'b10111111010011001100110011001101,
'b00111101110011001100110011001101,
'b00111111100000000000000000000000,
'b11000000010000000000000000000000,
'b11000000000001100110011001100110,
'b10111111100110011001100110011010,
'b10111110100110011001100110011010,
'b00111111000110011001100110011010,
'b00111111110000000000000000000000,
'b11000000001000000000000000000000,
'b10111111110011001100110011001101,
'b10111111001100110011001100110011,
'b00111110010011001100110011001101,
'b00111111100011001100110011001101,
'b01000000000000000000000000000000,
'b11000000000000000000000000000000,
'b10111111100011001100110011001101,
'b10111110010011001100110011001101,
'b00111111001100110011001100110011,
'b00111111110011001100110011001101,
'b01000000001000000000000000000000,
'b10111111110000000000000000000000,
'b10111111000110011001100110011010,
'b00111110100110011001100110011010,
'b00111111100110011001100110011010,
'b01000000000001100110011001100110,
'b01000000010000000000000000000000,
'b10111111100000000000000000000000,
'b10111101110011001100110011001101,
'b00111111010011001100110011001101,
'b00111111110110011001100110011010,
'b01000000001001100110011001100110,
'b01000000011000000000000000000000}; 

    initial begin
        reset_n = 0; 
        repeat (1)@(posedge clk)
        reset_n = 1; 
        enable = 1; 
        for (int i = 0; i < 48; i++)begin
            idata = inputdata[2*i]; 
            repeat (1)@(posedge clk)
            idata = inputdata[2*i+1]; 
//            wait(data_ready)
            repeat (6)@(posedge clk)
            clk=clk;
            if ($bitstoshortreal(odata) - $bitstoshortreal(expectedresults[i])>= 0.001|| $bitstoshortreal(expectedresults[i])-$bitstoshortreal(odata) >= 0.001) begin
//                if(odata.sign==expectedresults[i].sign&&odata.exponent==expectedresults[i].exponent&&(odata.significant-expectedresults[i].significant<2||expectedresults[i].significant-odata.significant<2))
//                    run_failed=0;
//                else begin
                    run_failed=1;
                    failed=failed+1;
//                    $stop;
//                end
                
            end else
                run_failed=0;
            $display("%s: %d Addition of %f and %f resulting in %f instead of %f with an error of %f", run_failed?"FAIL":"PASS", i,
            $bitstoshortreal(inputdata[2*i]),
            $bitstoshortreal(inputdata[2*i+1]),
            $bitstoshortreal(odata),$bitstoshortreal(expectedresults[i]),
            $bitstoshortreal(odata)-$bitstoshortreal(expectedresults[i])); 
        end
        if(failed)
            $display("Test failed with %d failures",failed);
        else
            $display("Test passed");
        repeat (3)@(posedge clk)
        $stop; 
    end

    always
        #5ps clk = ~clk; 

endmodule